#pragma kernel CSMain

float deltaTime;
float stiffness = 10.0f;
float damping = 0.9f;
float centerRadius = 1.0f;

uint nodeCount; // Change nodeCount to uint to match nodeIndex

struct SlimeNode
{
    float2 position;
    float2 velocity;
    float2 force;
    float mass;
};

StructuredBuffer<float4> _CoreBuffer; // x: pos.x, y: pos.y, z: rotation, w: mana
RWStructuredBuffer<SlimeNode> _NodeBuffer;

[numthreads(64, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint nodeIndex = id.x; // Use unsigned int (uint)
    if (nodeIndex >= nodeCount)
        return; // Ensure nodeIndex is within bounds

    SlimeNode node = _NodeBuffer[nodeIndex];

    float2 corePos = _CoreBuffer[0].xy;
    float coreRotation = _CoreBuffer[0].z;

    // Calculate angle for this node (based on its index and core rotation)
    float angle = (6.2831853 * nodeIndex / nodeCount) + coreRotation;

    // Compute target position on the circle
    float2 targetPos = corePos + float2(cos(angle), sin(angle)) * centerRadius;

    // Apply spring force towards the target position
    float2 dir = node.position - targetPos;
    float2 force = -normalize(dir) * length(dir) * stiffness;

    float2 acceleration = force / node.mass;

    node.velocity += acceleration * deltaTime;
    node.velocity *= damping;
    node.position += node.velocity * deltaTime;

    _NodeBuffer[nodeIndex] = node;
}
